{"version":3,"file":"rx-storage-instance-localstorage.js","names":["_rxjs","require","_index","_rxStorageHelper","_rxSchemaHelper","_rxQueryHelper","_rxError","_customIndex","_arrayPushAtSortPosition","_binarySearchBounds","RX_STORAGE_NAME_LOCALSTORAGE","exports","storageEventStream$","Subject","storageEventStreamObservable","asObservable","storageEventStreamSubscribed","getStorageEventStream","window","addEventListener","ev","key","next","fromStorageEvent","newValue","instanceId","RxStorageInstanceLocalstorage","storage","databaseName","collectionName","schema","internals","options","settings","multiInstance","databaseInstanceToken","changes$","removed","localStorage","primaryPath","getPrimaryFieldOfPrimaryKey","primaryKey","docsKey","version","changestreamStorageKey","indexesKey","attachmentsKey","changeStreamSub","subscribe","latestChanges","JSON","parse","eventBulk","_proto","prototype","getDoc","docId","docString","getItem","setDoc","doc","setItem","stringify","getIndex","index","indexString","getIndexName","setIndex","value","bulkWrite","documentWrites","context","ret","error","docsInDb","Map","forEach","row","document","set","categorized","categorizeBulkWriteRows","errors","indexValues","Object","values","indexes","map","idx","bulkInsertDocs","bulkUpdateDocs","rows","i","indexValue","newIndexString","getIndexableString","insertPosition","pushAtSortPosition","sortByIndexStringComparator","previous","previousIndexString","prev","splice","newRxError","args","indexBefore","boundEQ","compareDocsWithIndex","attachmentsAdd","attachment","documentId","attachmentId","attachmentData","data","attachmentsUpdate","attachmentsRemove","removeItem","events","length","lastState","ensureNotFalsy","newestRow","checkpoint","id","lwt","_meta","storageItemData","itemString","Promise","resolve","findDocumentsById","docIds","withDeleted","_deleted","push","query","preparedQuery","queryPlan","skip","limit","Infinity","skipPlusLimit","queryMatcher","selectorSatisfiedByIndex","getQueryMatcher","queryPlanFields","mustManuallyResort","sortSatisfiedByIndex","lowerBound","startKeys","lowerBoundString","getStartIndexStringFromLowerBound","upperBound","endKeys","upperBoundString","getStartIndexStringFromUpperBound","docsWithIndex","indexOfLower","inclusiveStart","boundGE","boundGT","indexOfUpper","inclusiveEnd","boundLE","boundLT","done","currentRow","currentDoc","sortComparator","getSortComparator","sort","slice","documents","count","result","mode","changeStream","cleanup","minimumDeletedTime","_this","maxDeletionTime","now","CLEANUP_INDEX","_loop","currentIndexRow","currentDocId","PROMISE_RESOLVE_TRUE","getAttachmentData","remove","ensureNotRemoved","unsubscribe","firstIndex","indexedDocs","indexName","PROMISE_RESOLVE_VOID","close","closed","complete","createLocalstorageStorageInstance","params","useIndexes","useIndexesFinal","indexAr","toArray","indexId","getIndexableStringMonad","instance","join","a","b","indexStringA","indexStringB","Error"],"sources":["../../../../src/plugins/storage-localstorage/rx-storage-instance-localstorage.ts"],"sourcesContent":["import { Observable, Subject, Subscription } from 'rxjs';\nimport {\n    PROMISE_RESOLVE_TRUE,\n    PROMISE_RESOLVE_VOID,\n    ensureNotFalsy,\n    now,\n    toArray\n} from '../utils/index.ts';\nimport type {\n    BulkWriteRow,\n    ById,\n    EventBulk,\n    PreparedQuery,\n    QueryMatcher,\n    RxDocumentData,\n    RxDocumentWriteData,\n    RxJsonSchema,\n    RxStorageBulkWriteResponse,\n    RxStorageChangeEvent,\n    RxStorageCountResult,\n    RxStorageDefaultCheckpoint,\n    RxStorageInstance,\n    RxStorageInstanceCreationParams,\n    RxStorageQueryResult,\n    StringKeys\n} from '../../types/index';\nimport {\n    categorizeBulkWriteRows\n} from '../../rx-storage-helper.ts';\nimport { getPrimaryFieldOfPrimaryKey } from '../../rx-schema-helper.ts';\nimport { getQueryMatcher, getSortComparator } from '../../rx-query-helper.ts';\nimport { newRxError } from '../../rx-error.ts';\nimport type { RxStorageLocalstorage } from './index.ts';\nimport {\n    getIndexableStringMonad,\n    getStartIndexStringFromLowerBound,\n    getStartIndexStringFromUpperBound\n} from '../../custom-index.ts';\nimport { pushAtSortPosition } from 'array-push-at-sort-position';\nimport { boundEQ, boundGE, boundGT, boundLE, boundLT } from '../storage-memory/binary-search-bounds.ts';\n\nexport const RX_STORAGE_NAME_LOCALSTORAGE = 'localstorage';\n\n\nexport type LocalstorageStorageInternals<RxDocType = any> = {\n    indexes: ById<IndexMeta<RxDocType>>;\n};\n\nexport type LocalstorageInstanceCreationOptions = {};\n\nexport type LocalstorageStorageSettings = {\n    localStorage?: typeof localStorage\n};\n\n// index-string to doc-id mapped\nexport type LocalstorageIndex = string[][];\n\nexport type ChangeStreamStoredData<RxDocType> = {\n    databaseInstanceToken: string;\n    eventBulk: EventBulk<RxStorageChangeEvent<RxDocumentData<RxDocType>>, any>;\n}\n\n\n/**\n * StorageEvents are not send to the same\n * browser tab where they where created.\n * This makes it hard to write unit tests\n * so we redistribute the events here instead.\n */\nexport const storageEventStream$: Subject<{\n    fromStorageEvent: boolean;\n    key: string;\n    newValue: string | null;\n    databaseInstanceToken?: string;\n}> = new Subject();\nconst storageEventStreamObservable = storageEventStream$.asObservable();\nlet storageEventStreamSubscribed = false;\nexport function getStorageEventStream() {\n    if (!storageEventStreamSubscribed && typeof window !== 'undefined') {\n        storageEventStreamSubscribed = true;\n        window.addEventListener('storage', (ev: StorageEvent) => {\n            if (!ev.key) {\n                return;\n            }\n            storageEventStream$.next({\n                fromStorageEvent: true,\n                key: ev.key,\n                newValue: ev.newValue\n            });\n        });\n    }\n    return storageEventStreamObservable;\n}\n\nlet instanceId = 0;\nexport class RxStorageInstanceLocalstorage<RxDocType> implements RxStorageInstance<\n    RxDocType,\n    LocalstorageStorageInternals,\n    LocalstorageInstanceCreationOptions,\n    RxStorageDefaultCheckpoint\n> {\n    public readonly primaryPath: StringKeys<RxDocType>;\n\n    /**\n     * Under this key the whole state\n     * will be stored as stringified json\n     * inside of the localstorage.\n     */\n    public readonly docsKey: string;\n    public readonly attachmentsKey: string;\n    public readonly changestreamStorageKey: string;\n    public readonly indexesKey: string;\n    private changeStreamSub: Subscription;\n\n    private changes$: Subject<EventBulk<RxStorageChangeEvent<RxDocumentData<RxDocType>>, RxStorageDefaultCheckpoint>> = new Subject();\n    public closed?: Promise<void>;\n    public readonly localStorage: typeof localStorage;\n    public removed: boolean = false;\n    public readonly instanceId = instanceId++;\n\n    constructor(\n        public readonly storage: RxStorageLocalstorage,\n        public readonly databaseName: string,\n        public readonly collectionName: string,\n        public readonly schema: Readonly<RxJsonSchema<RxDocumentData<RxDocType>>>,\n        public readonly internals: LocalstorageStorageInternals,\n        public readonly options: Readonly<LocalstorageInstanceCreationOptions>,\n        public readonly settings: LocalstorageStorageSettings,\n        public readonly multiInstance: boolean,\n        public readonly databaseInstanceToken: string\n    ) {\n        this.localStorage = settings.localStorage ? settings.localStorage : window.localStorage;\n        this.primaryPath = getPrimaryFieldOfPrimaryKey(this.schema.primaryKey) as any;\n        this.docsKey = 'RxDB-ls-doc-' + this.databaseName + '--' + this.collectionName + '--' + this.schema.version;\n        this.changestreamStorageKey = 'RxDB-ls-changes-' + this.databaseName + '--' + this.collectionName + '--' + this.schema.version;\n        this.indexesKey = 'RxDB-ls-idx-' + this.databaseName + '--' + this.collectionName + '--' + this.schema.version;\n        this.attachmentsKey = 'RxDB-ls-attachment-' + this.databaseName + '--' + this.collectionName + '--' + this.schema.version;\n\n        this.changeStreamSub = getStorageEventStream().subscribe((ev) => {\n            if (\n                ev.key !== this.changestreamStorageKey ||\n                !ev.newValue ||\n                (\n                    ev.fromStorageEvent &&\n                    ev.databaseInstanceToken === this.databaseInstanceToken\n                )\n            ) {\n                return;\n            }\n\n            const latestChanges: ChangeStreamStoredData<RxDocType> = JSON.parse(ev.newValue);\n            if (\n                ev.fromStorageEvent &&\n                latestChanges.databaseInstanceToken === this.databaseInstanceToken\n            ) {\n                return;\n            }\n            this.changes$.next(latestChanges.eventBulk);\n        });\n    }\n\n    getDoc(docId: string | RxDocumentWriteData<RxDocType>[StringKeys<RxDocType>]): RxDocumentData<RxDocType> | undefined {\n        const docString = this.localStorage.getItem(this.docsKey + '-' + docId as string);\n        if (docString) {\n            return JSON.parse(docString);\n        }\n    }\n    setDoc(doc: RxDocumentData<RxDocType>) {\n        const docId = doc[this.primaryPath];\n        this.localStorage.setItem(this.docsKey + '-' + docId, JSON.stringify(doc));\n    }\n    getIndex(index: string[]): LocalstorageIndex {\n        const indexString = this.localStorage.getItem(this.indexesKey + getIndexName(index));\n        if (!indexString) {\n            return [];\n        } else {\n            return JSON.parse(indexString);\n        }\n    }\n    setIndex(index: string[], value: LocalstorageIndex) {\n        this.localStorage.setItem(this.indexesKey + getIndexName(index), JSON.stringify(value));\n    }\n\n\n    bulkWrite(\n        documentWrites: BulkWriteRow<RxDocType>[],\n        context: string\n    ): Promise<RxStorageBulkWriteResponse<RxDocType>> {\n        const ret: RxStorageBulkWriteResponse<RxDocType> = {\n            error: []\n        };\n\n        const docsInDb = new Map<RxDocumentData<RxDocType>[StringKeys<RxDocType>] | string, RxDocumentData<RxDocType>>();\n        documentWrites.forEach(row => {\n            const docId = row.document[this.primaryPath];\n            const doc = this.getDoc(docId);\n            if (doc) {\n                docsInDb.set(docId, doc);\n            }\n        });\n\n        const categorized = categorizeBulkWriteRows<RxDocType>(\n            this,\n            this.primaryPath,\n            docsInDb,\n            documentWrites,\n            context\n        );\n        ret.error = categorized.errors;\n\n\n        const indexValues = Object.values(this.internals.indexes).map(idx => {\n            return this.getIndex(idx.index);\n        });\n\n        [\n            categorized.bulkInsertDocs,\n            categorized.bulkUpdateDocs\n        ].forEach(rows => {\n            rows.forEach(row => {\n                // write new document data\n                this.setDoc(row.document);\n\n                // update the indexes\n                const docId = row.document[this.primaryPath] as string;\n                Object.values(this.internals.indexes).forEach((idx, i) => {\n                    const indexValue = indexValues[i];\n                    const newIndexString = idx.getIndexableString(row.document);\n                    const insertPosition = pushAtSortPosition<string[]>(\n                        indexValue,\n                        [\n                            newIndexString,\n                            docId,\n                        ],\n                        sortByIndexStringComparator,\n                        0\n                    );\n                    if (row.previous) {\n                        const previousIndexString = idx.getIndexableString(row.previous);\n                        if (previousIndexString === newIndexString) {\n                            /**\n                             * Performance shortcut.\n                             * If index was not changed -> The old doc must be before or after the new one.\n                             */\n                            const prev = indexValue[insertPosition - 1];\n                            if (prev && prev[1] === docId) {\n                                indexValue.splice(insertPosition - 1, 1);\n                            } else {\n                                const next = indexValue[insertPosition + 1];\n                                if (next[1] === docId) {\n                                    indexValue.splice(insertPosition + 1, 1);\n                                } else {\n                                    throw newRxError('SNH', {\n                                        document: row.document,\n                                        args: {\n                                            insertPosition,\n                                            indexValue,\n                                            row,\n                                            idx\n                                        }\n                                    });\n                                }\n                            }\n                        } else {\n                            /**\n                             * Index changed, we must search for the old one and remove it.\n                             */\n                            const indexBefore = boundEQ(\n                                indexValue,\n                                [\n                                    previousIndexString\n                                ] as any,\n                                compareDocsWithIndex\n                            );\n                            indexValue.splice(indexBefore, 1);\n                        }\n                    }\n                });\n\n            });\n        });\n\n        indexValues.forEach((indexValue, i) => {\n            const index = Object.values(this.internals.indexes);\n            this.setIndex(index[i].index, indexValue);\n        });\n\n        // attachments\n        categorized.attachmentsAdd.forEach(attachment => {\n            this.localStorage.setItem(\n                this.attachmentsKey +\n                '-' + attachment.documentId +\n                '||' + attachment.attachmentId,\n                attachment.attachmentData.data\n            );\n        });\n        categorized.attachmentsUpdate.forEach(attachment => {\n            this.localStorage.setItem(\n                this.attachmentsKey +\n                '-' + attachment.documentId +\n                '||' + attachment.attachmentId,\n                attachment.attachmentData.data\n            );\n        });\n        categorized.attachmentsRemove.forEach(attachment => {\n            this.localStorage.removeItem(\n                this.attachmentsKey +\n                '-' + attachment.documentId +\n                '||' + attachment.attachmentId\n            );\n        });\n\n        if (categorized.eventBulk.events.length > 0) {\n            const lastState = ensureNotFalsy(categorized.newestRow).document;\n            categorized.eventBulk.checkpoint = {\n                id: lastState[this.primaryPath],\n                lwt: lastState._meta.lwt\n            };\n            const storageItemData: ChangeStreamStoredData<RxDocType> = {\n                databaseInstanceToken: this.databaseInstanceToken,\n                eventBulk: categorized.eventBulk\n            };\n            const itemString = JSON.stringify(storageItemData);\n            this.localStorage.setItem(\n                this.changestreamStorageKey,\n                itemString\n            );\n            storageEventStream$.next({\n                fromStorageEvent: false,\n                key: this.changestreamStorageKey,\n                newValue: itemString,\n                databaseInstanceToken: this.databaseInstanceToken\n            });\n        }\n        return Promise.resolve(ret);\n    }\n\n    async findDocumentsById(\n        docIds: string[],\n        withDeleted: boolean\n    ): Promise<RxDocumentData<RxDocType>[]> {\n        const ret: RxDocumentData<RxDocType>[] = [];\n        docIds.forEach(docId => {\n            const doc = this.getDoc(docId);\n            if (doc) {\n                if (withDeleted || !doc._deleted) {\n                    ret.push(doc);\n                }\n            }\n        });\n        return ret;\n    }\n\n    async query(\n        preparedQuery: PreparedQuery<RxDocType>\n    ): Promise<RxStorageQueryResult<RxDocType>> {\n        const queryPlan = preparedQuery.queryPlan;\n        const query = preparedQuery.query;\n\n        const skip = query.skip ? query.skip : 0;\n        const limit = query.limit ? query.limit : Infinity;\n        const skipPlusLimit = skip + limit;\n\n        let queryMatcher: QueryMatcher<RxDocumentData<RxDocType>> | false = false;\n        if (!queryPlan.selectorSatisfiedByIndex) {\n            queryMatcher = getQueryMatcher(\n                this.schema,\n                preparedQuery.query\n            );\n        }\n\n        const queryPlanFields: string[] = queryPlan.index;\n        const mustManuallyResort = !queryPlan.sortSatisfiedByIndex;\n        const index: string[] | undefined = queryPlanFields;\n        const lowerBound: any[] = queryPlan.startKeys;\n        const lowerBoundString = getStartIndexStringFromLowerBound(\n            this.schema,\n            index,\n            lowerBound\n        );\n\n        let upperBound: any[] = queryPlan.endKeys;\n        upperBound = upperBound;\n        const upperBoundString = getStartIndexStringFromUpperBound(\n            this.schema,\n            index,\n            upperBound\n        );\n        const docsWithIndex = this.getIndex(index);\n        let indexOfLower = (queryPlan.inclusiveStart ? boundGE : boundGT)(\n            docsWithIndex,\n            [\n                lowerBoundString\n            ] as any,\n            compareDocsWithIndex\n        );\n\n        const indexOfUpper = (queryPlan.inclusiveEnd ? boundLE : boundLT)(\n            docsWithIndex,\n            [\n                upperBoundString\n            ] as any,\n            compareDocsWithIndex\n        );\n\n        let rows: RxDocumentData<RxDocType>[] = [];\n        let done = false;\n        while (!done) {\n            const currentRow = docsWithIndex[indexOfLower];\n            if (\n                !currentRow ||\n                indexOfLower > indexOfUpper\n            ) {\n                break;\n            }\n            const docId = currentRow[1];\n            const currentDoc = ensureNotFalsy(this.getDoc(docId));\n\n            if (!queryMatcher || queryMatcher(currentDoc)) {\n                rows.push(currentDoc);\n            }\n\n            if (\n                (rows.length >= skipPlusLimit && !mustManuallyResort)\n            ) {\n                done = true;\n            }\n\n            indexOfLower++;\n        }\n\n        if (mustManuallyResort) {\n            const sortComparator = getSortComparator(this.schema, preparedQuery.query);\n            rows = rows.sort(sortComparator);\n        }\n\n        // apply skip and limit boundaries.\n        rows = rows.slice(skip, skipPlusLimit);\n        return Promise.resolve({\n            documents: rows\n        });\n    }\n\n    async count(\n        preparedQuery: PreparedQuery<RxDocType>\n    ): Promise<RxStorageCountResult> {\n        const result = await this.query(preparedQuery);\n        return {\n            count: result.documents.length,\n            mode: 'fast'\n        };\n    }\n\n    changeStream(): Observable<EventBulk<RxStorageChangeEvent<RxDocumentData<RxDocType>>, RxStorageDefaultCheckpoint>> {\n        return this.changes$.asObservable();\n    }\n    cleanup(minimumDeletedTime: number): Promise<boolean> {\n        const maxDeletionTime = now() - minimumDeletedTime;\n        const indexValue = this.getIndex(CLEANUP_INDEX);\n        const lowerBoundString = getStartIndexStringFromLowerBound(\n            this.schema,\n            CLEANUP_INDEX,\n            [\n                true,\n                0,\n                ''\n            ]\n        );\n        let indexOfLower = boundGT(\n            indexValue,\n            [\n                lowerBoundString\n            ] as any,\n            compareDocsWithIndex\n        );\n\n        const indexValues = Object.values(this.internals.indexes).map(idx => {\n            return this.getIndex(idx.index);\n        });\n\n        let done = false;\n        while (!done) {\n            const currentIndexRow = indexValue[indexOfLower];\n            if (!currentIndexRow) {\n                break;\n            }\n            const currentDocId = currentIndexRow[1];\n            const currentDoc = ensureNotFalsy(this.getDoc(currentDocId));\n            if (currentDoc._meta.lwt > maxDeletionTime) {\n                done = true;\n            } else {\n                this.localStorage.removeItem(this.docsKey + '-' + currentDocId);\n                Object.values(this.internals.indexes).forEach((idx, i) => {\n                    const indexValue = indexValues[i];\n                    const indexString = idx.getIndexableString(currentDoc);\n                    const indexBefore = boundEQ(\n                        indexValue,\n                        [\n                            indexString\n                        ] as any,\n                        compareDocsWithIndex\n                    );\n                    indexValue.splice(indexBefore, 1);\n                });\n                indexOfLower++;\n            }\n        }\n\n        indexValues.forEach((indexValue, i) => {\n            const index = Object.values(this.internals.indexes);\n            this.setIndex(index[i].index, indexValue);\n        });\n\n        return PROMISE_RESOLVE_TRUE;\n    }\n\n    async getAttachmentData(documentId: string, attachmentId: string): Promise<string> {\n        const data = this.localStorage.getItem(this.attachmentsKey + '-' + documentId + '||' + attachmentId);\n        return ensureNotFalsy(data);\n    }\n\n    remove(): Promise<void> {\n        ensureNotRemoved(this);\n        this.removed = true;\n\n        // delete changes\n        this.changeStreamSub.unsubscribe();\n        this.localStorage.removeItem(this.changestreamStorageKey);\n\n        // delete documents\n        const firstIndex = Object.values(this.internals.indexes)[0];\n        const indexedDocs = this.getIndex(firstIndex.index);\n        indexedDocs.forEach(row => {\n            const docId = row[1];\n            this.localStorage.removeItem(this.docsKey + '-' + docId);\n        });\n\n        // delete indexes\n        Object.values(this.internals.indexes).forEach(idx => {\n            this.localStorage.removeItem(this.indexesKey + idx.indexName);\n        });\n\n        return PROMISE_RESOLVE_VOID;\n    }\n\n    close(): Promise<void> {\n        this.changeStreamSub.unsubscribe();\n        this.removed = true;\n\n        if (this.closed) {\n            return this.closed;\n        }\n        this.closed = (async () => {\n            this.changes$.complete();\n            this.localStorage.removeItem(this.changestreamStorageKey);\n        })();\n        return this.closed;\n    }\n}\n\nexport async function createLocalstorageStorageInstance<RxDocType>(\n    storage: RxStorageLocalstorage,\n    params: RxStorageInstanceCreationParams<RxDocType, LocalstorageInstanceCreationOptions>,\n    settings: LocalstorageStorageSettings\n): Promise<RxStorageInstanceLocalstorage<RxDocType>> {\n    const primaryPath = getPrimaryFieldOfPrimaryKey(params.schema.primaryKey);\n\n    const useIndexes = params.schema.indexes ? params.schema.indexes.slice(0) : [];\n    useIndexes.push([primaryPath]);\n    const useIndexesFinal = useIndexes.map(index => {\n        const indexAr = toArray(index);\n        return indexAr;\n    });\n    useIndexesFinal.push(CLEANUP_INDEX);\n    const indexes: ById<IndexMeta<RxDocType>> = {};\n    useIndexesFinal.forEach((indexAr, indexId) => {\n        const indexName = getIndexName(indexAr);\n        indexes[indexName] = {\n            indexId: '|' + indexId + '|',\n            indexName,\n            getIndexableString: getIndexableStringMonad(params.schema, indexAr),\n            index: indexAr\n        };\n    });\n\n    const internals: LocalstorageStorageInternals<RxDocType> = {\n        indexes\n    };\n\n    const instance = new RxStorageInstanceLocalstorage(\n        storage,\n        params.databaseName,\n        params.collectionName,\n        params.schema,\n        internals,\n        params.options,\n        settings,\n        params.multiInstance,\n        params.databaseInstanceToken\n    );\n    return instance;\n}\n\n\nexport function getIndexName(index: string[]): string {\n    return index.join('|');\n}\nexport const CLEANUP_INDEX: string[] = ['_deleted', '_meta.lwt'];\nexport type IndexMeta<RxDocType> = {\n    indexId: string;\n    indexName: string;\n    index: string[];\n    getIndexableString: (doc: RxDocumentData<RxDocType>) => string;\n};\n\nfunction sortByIndexStringComparator(a: [string, string], b: [string, string]) {\n    if (a[0] < b[0]) {\n        return -1;\n    } else {\n        return 1;\n    }\n}\n\nfunction compareDocsWithIndex<RxDocType>(\n    a: [string, string],\n    b: [string, string]\n): 1 | 0 | -1 {\n    const indexStringA = a[0];\n    const indexStringB = b[0];\n    if (indexStringA < indexStringB) {\n        return -1;\n    } else if (indexStringA === indexStringB) {\n        return 0;\n    } else {\n        return 1;\n    }\n}\n\nfunction ensureNotRemoved(\n    instance: RxStorageInstanceLocalstorage<any>\n) {\n    if (instance.removed) {\n        throw new Error('removed');\n    }\n}\n"],"mappings":"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","ignoreList":[]}